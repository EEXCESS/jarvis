
-------------------------------- INSTALLATION --------------------------------
- angular  version can not be automatically resolved on  OS X and Linux

sech@hoaxis:~/dev/eexcessredesign/src$ bower install
[some more details omitted]
Unable to find a suitable version for angular, please choose one:
    1) angular#~1.3.15 which resolved to 1.3.15 and is required by Jarvis
    2) angular#1.3.15 which resolved to 1.3.15 and is required by angular-animate#1.3.15
    3) angular#^1.3.0 || >1.4.0-beta.0 which resolved to 1.3.15 and is required by angular-material#0.9.7
    4) angular#1.4.0 which resolved to 1.4.0 and is required by angular-aria#1.4.0

Prefix the choice with ! to persist it to bower.json

? Answer: 1?


-------------------------------- USAGE -----------------------------------------------

I did an informal user test at the project plenary meeting (10 users, freely associating what they think after a demo) . You can use the results in your thesis. 

    1) paragraph centred view is nice and relevant
    2) also interesting for content creation process (usually you go multiple times over a document and could improve it incrementally with reading resources)
    3) also be used to implement “Plagiarism 2.0” with high quality sources (copying wikipedia is what pupils currently do, but they are annoyed because plagiarism is detected)
   4) change color of search button, showing whether the current keywords fit to the results or if the result list is outdated
   5) show process indicator (or hide result icons when you construct a new query)
   6) visually differentiate automatically constructed query terms and manually constructed terms
   7) icons are confusing - alternative: annotate would be “magnifier” and additionally a refresh icon
   8) 1 button vs 2 buttons (make it as minimal as possible vs. overload meaning of button)
   9) conceptually the best would be to automatically update the results when a new query is reconstructed, but might be not possible due to performance of the backend 
   10) concept also suitable for larger touch displays, as extension only deployable on windows 8
  11) could also be potentially used for Wikipedia editors?
  12) settings: allow for language setting (target language), e.g. on portugeese wikipedia pages show only portugeese and english results
  13) with unicode, special characters some words are wronlgy split, e.g. matemático britânico (split as “nico”) on https://pt.wikipedia.org/wiki/Ada_Lovelace

  ----------------------- CONCLUSION/IMPLEMENTATION ----------------------------
  Vorschläge:
   * automatisches annotieren muss nur einmal gemacht werden. d.h. der erste button wird in den meisten fällen nur einmal genutzt -> weg damit ;-)
   es gibt nur einen button. der ist am anfang rot, und hat das lupensymbol. es wird die annotierung gemacht und auch gleich die erste query abgeschickt (das ist eh der normale usage workflow, erstmal sehen, was für ergebnisse kommen und dann evtl die query anpassen).  wenn die suchergebnisse da sind, wird das lupensymbol grün (heißt "resultate sind aktuell"). sobald die query geändert wird, ändert sich die farbe wieder auf rot (heißt "resultate sind nicht aktuell"). 
   * auf alle fälle muss es einen process indicator geben. wenn einer der services nicht funktioniert, muss user wissen, dass es so ist (nicht dass er/sie denkt, die query is doof und deswegen kommt nichts zurück)
   * unter linux hab ich z.B. den fall, dass beim klick auf das lupensymbol nix passiert und ich (als user) weiß dann nicht, was falschist
   * 9) ist vermutlich nicht feasible aus performance gründen?
   * 13) sollte man sich mal noch anschauen, weil bei falschem spliting der entity service kompletten blödsinn liefert
   